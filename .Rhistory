qplot(price, data=diamonds, geom = "density")
qplot(price, data=diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm")
skip()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("impute")
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
library(swirl)
swirl()
dist(dataFrame)
hc<- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col = "blue")
abline(h=0.4, col = "red")
5
5
6
4
5
3
info()
2
1
7
8
5
skip()
info()
main()
swirl()
4
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
dmist(x, y, cx, cy)
mdist(x, y, cx, cy)
apply(disTmp, 2, which.min)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust,mean)
tapply(y, newClust,mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plots(x,y,col=kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit(addPatt.R)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(mat)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constrantMatrix)
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) %*% svd1$d[1]
a1 <- (svd1$u[,1]) %*% (svd1$v[,1]) %*% svd1$d[1]
a1 <- (svd1$u[,1]) %*% t(svd1$v[,1]) * svd1$d[1]
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(,562:563)
names(ssd)[,562:563]
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1, n=12)
names(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1, x[,1:3])
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12],maxCon))
mdist <- dist(c("sub1[,10:12]",maxCon))
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust <- hclustering, lab.col=unclass(sub1$activity)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
tables(kClust$cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
kClust <- table(kClust$cluster, sub1$activity, nstart = 100)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames$names
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
make.names(cnames[[1]]p[wcol])
make.names(cnames[[1]][wcol])
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative, na.rm=TRUE)
mean(negative,na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(str0)
str(site0)
intersect(site0,site1)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36, county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cnt1,cnt0$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub <- subset(cnt0, County.Code == 63 % Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pc = 20)
plot(dates0, x0sub, pch = 20)
abline(median,lwd=2,na.rm=TRUE)
abline(median(x0sub),lwd=2,na.rm=TRUE)
abline(median(x0sub, na.rm=TRUE),lwd=2)
abline(h = median(x0sub, na.rm=TRUE),lwd=2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm=TRUE),lwd=2)
rng = range(x0sub, x1sub, na.rm=TRUE)
rng <- range(x0sub, x1sub, na.rm=TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mo0)
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state= names(mn0), mean = mn0)
d1 <- data.frame(state= names(mn1), mean = mn1)
mrg <- merge(d0,d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(0.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3])
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1999))
segments(rep(1999,1), rep(2012,2))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1,]
testSpam = spam[trainIndicator == 0,]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv, method = "loess")
quit()
library(swirl)
swirl()
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g <- ggplot(mpg, aes = c(displ,hwy))
g <- ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point() + geom_smooth()
g+geom_point() + geom_smooth(method="lm")
g+geom_point() + geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point() + geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g + geom_point(color="pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs (x = "Displacement", y = "Hwy Mileage")
g + geom_point(size = 4, alpha = 1/2, aes(color = drv)) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv),size = 4, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv),size =2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(color = drv) + theme_bw(base_family = "Times")
g + geom_point(aes(color = drv) + theme_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx,myy,type = "l", ylom = c(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line()+ ylim(-3,3)
g + geom_line()+ coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point()+facet_grid(drv~cyl,margins=TRUE)
g + geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g + geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+functions(x="Displacement", y="Highway Mileage", title = "Swirl Rules!")
g + geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement", y="Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price, data=diamonds,geom="density")
qplot(price, data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),method ="lm")
skip()
library(swirl)
swirl()
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"))
skip()
swirl()
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
range(diamonds$price, binwidth=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30, fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"))
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),facets=.~cut())
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),facets=.~cut)
g <- ggplot(diamonds,aes(depth,price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
setwd("C:/Users/Ser Xing/RepData_PeerAssessment1")
install.packages("rmarkdown")
library(rmarkdown)
unzip("activity.zip")
dat <- read.csv("activity.csv")
str(dat)
head(dat)
dat$date <- weekdays(as.Date(activity$date))
dat$date <- weekdays(as.Date(dat$date))
str(dat)
rm(dat)
dat <- read.csv("activity.csv")
dat$date <- as.Date(dat$date, format = "%Y-%m-%d")
str(dat)
head(dat)
todat <- aggregate(dat$steps, list(dat$date), sum, na.rm = TRUE)
View(todat)
library(plyr)
library(ggplot2)
names(todat) <- rename(c("Group.1" = "date", "x" = "total_steps"))
names(todat) <- rename(todat, c("Group.1" = "date", "x" = "total_steps"))
rm(todat)
colnames(todat) <- c("Date", "Total_Steps")
todat <- aggregate(dat$steps, list(dat$date), sum, na.rm = TRUE)
colnames(todat) <- c("Date", "Total_Steps")
hist(todat$Total_Steps~todat$Date, ylab = "Total Steps", xlab = "Day")
hist(todat$Total_Steps ~ todat$Date, ylab = "Total Steps", xlab = "Day")
hist(todat$Total_Steps, ylab = "Total Steps", xlab = "Day")
qplot(todat$Total_Steps, main = "Total Number of Steps Taken per Day", ylab = "Total Steps", xlab = "Date")
qplot(todat$Total_Steps, todat$Date, main = "Total Number of Steps Taken per Day", ylab = "Total Steps", xlab = "Date")
hist(todat$Total_Steps, ylab = "Total Steps", xlab = "Day")
View(todat)
qplot(todat$Total_Steps, geom = "histogram", main = "Total Number of Steps Taken per Day", ylab = "Total Steps", xlab = "Date")
ggplot(todat, aes(Date, Total_Steps)) + geom_histogram() + labs(title = "Total Number of Steps Taken per Day", x = "Date", y = "Total Steps")
ggplot(todat, aes(Date)) + geom_histogram() + labs(title = "Total Number of Steps Taken per Day", x = "Date", y = "Total Steps")
ggplot(todat, aes(Total_Steps)) + geom_histogram() + labs(title = "Total Number of Steps Taken per Day", x = "Date", y = "Total Steps")
hist(todat$Total_Steps, ylab = "Frequency", xlab = "Total Steps")
hist(todat$Total_Steps, ylab = "Frequency", xlab = "Total Steps", main = "Total Number of Steps Taken per Day")
hist(todat$Total_Steps, breaks = 10, ylab = "Frequency", xlab = "Total Steps", main = "Total Number of Steps Taken per Day")
hist(todat$Total_Steps, breaks = 15, ylab = "Frequency", xlab = "Total Steps", main = "Total Number of Steps Taken per Day")
hist(todat$Total_Steps, breaks = 20, ylab = "Frequency", xlab = "Total Steps", main = "Total Number of Steps Taken per Day")
mean(todat)
str(todat)
as.numeric(todat$Total_Steps)
mean(todat)
mean(todat$Total_Steps)
todat <- aggregate(dat$steps ~ dat$date, sum, na.rm = TRUE)
mean(todat$Total_Steps, na.rm = TRUE)
todat <- aggregate(dat$steps, list(dat$date), sum)
mean(todat$Total_Steps, na.rm = TRUE)
colnames(todat) <- c("Date", "Total_Steps")
as.numeric(todat$Total_Steps)
mean(todat$Total_Steps, na.rm = TRUE)
median(todat$Total_Steps, na.rm = TRUE)
hist(todat$Total_Steps, breaks = 20, ylab = "Frequency", xlab = "Total Steps", main = "Total Number of Steps Taken per Day")
View(todat)
View(dat)
newdat <- na.omit(dat)
View(newdat)
View(dat)
View(todat)
View(dat)
interval <- ddply(newdat, .(interval), summarise, ave = mean(steps))
View(interval)
ggplot(interval, aes(interval, ave)) + labs(title = "Average Number of Steps Taken by Interval") + labs(x = "Interval") + labs(y = "Average Number of Steps") +
ggplot(interval, aes(interval, ave)) + labs(title = "Average Number of Steps Taken by Interval") + labs(x = "Interval") + labs(y = "Average Number of Steps")
rm(interval)
intdat <- ddply(newdat, .(interval), summarise, ave = mean(steps))
ggplot(intdat, aes(interval, ave)) + labs(title = "Average Number of Steps Taken by Interval") + labs(x = "Interval") + labs(y = "Average Number of Steps")
View(intdat)
ggplot(intdat, aes(interval, ave)) + geom_line() + labs(title = "Average Number of Steps Taken by Interval") + labs(x = "Interval") + labs(y = "Average Number of Steps")
intdat[intdat$ave == max(intdat$ave),]
sum(is.na(dat))
View(intdat)
missdat <- dat[is.na(dat$steps),]
View(missdat)
View(intdat)
missdatn <- merge(missdat, intdat, by.x = "interval", byby.y = "interval", all = TRUE)
View(missdatn)
filldat <- dat
for (i in 1:datrow) {
if (is.na(filldat$steps[i])) {
filldat$steps[i] <- intdat[which(filldat$interval[i] == intdat$interval),]$ave
}
}
datrow <- nrow(dat)
filldat <- dat
for (i in 1:datrow) {
if (is.na(filldat$steps[i])) {
filldat$steps[i] <- intdat[which(filldat$interval[i] == intdat$interval),]$ave
}
}
View(filldat)
sum(is.na(filldat))
newtodat <- aggregate(dat$steps, list(dat$date), sum)
colnames(newtodat) <- c("Date", "Total_Steps")
as.numeric(newtodat$Total_Steps)
hist(newtodat$Total_Steps, breaks = 20, ylab = "Frequency", xlab = "Total Steps", main = "Total Number of Steps Taken per Day")
hist(todat$Total_Steps, breaks = 20, ylab = "Frequency", xlab = "Total Steps", main = "Total Number of Steps Taken per Day")
hist(newtodat$Total_Steps, breaks = 20, ylab = "Frequency", xlab = "Total Steps", main = "Total Number of Steps Taken per Day")
hist(newtodat$Total_Steps, breaks = 20, ylab = "Frequency", xlab = "Total Steps", main = "Total Number of Steps Taken per Day (with Filled Data)")
mean(newtodat$Total_Steps)
mean(newtodat$Total_Steps, na.rm = TRUE)
View(newtodat)
newtodat <- aggregate(filldat$steps, list(filldat$date), sum)
colnames(newtodat) <- c("Date", "Total_Steps")
as.numeric(newtodat$Total_Steps)
hist(newtodat$Total_Steps, breaks = 20, ylab = "Frequency", xlab = "Total Steps", main = "Total Number of Steps Taken per Day (with Filled Data)")
mean(newtodat$Total_Steps)
median(newtodat$Total_Steps)
filldat$day <- weekday(filldat$date)
filldat$day <- weekdays(filldat$date)
View(filldat)
filldat <- mutate(filldat, weekcat = factor(fillday$day == "Saturday" | "Sunday"), labels = c("Weekend", "Weekday"))
filldat <- mutate(filldat, weekcat = factor(filldat$day == "Saturday" | "Sunday"), labels = c("Weekend", "Weekday"))
filldat <- mutate(filldat, weekcat = factor(filldat$day == "Saturday" | filldat$day == "Sunday"), labels = c("Weekend", "Weekday"))
View(filldat)
filldat <- mutate(filldat, weekcat = factor(1 *(filldat$day == "Saturday" | filldat$day == "Sunday"), labels = c("Weekend", "Weekday"))
filldat <- mutate(filldat, weekcat = factor(1 *(filldat$day == "Saturday" | filldat$day == "Sunday")), labels = c("Weekend", "Weekday"))
View(filldat)
filldat <- mutate(filldat, weekcat = factor(filldat$day == "Saturday" | filldat$day == "Sunday"), labels = c("Weekend", "Weekday"))
View(filldat)
View(filldat)
weekdayend <- group_by(filldat, weekcat)
library(dplyr)
weekdayend <- group_by(filldat, weekcat)
View(weekdayend)
filldat <- mutate(filldat, weekcat = factor(filldat$day == "Saturday" | filldat$day == "Sunday"), labels = c("Weekend", "Weekday"))
filldat <- dat
for (i in 1:datrow) {
if (is.na(filldat$steps[i])) {
filldat$steps[i] <- intdat[which(filldat$interval[i] == intdat$interval),]$ave
}
}
View(filldat)
filldat$day <- weekdays(filldat$date)
levels(filldat$weekday) <- list(Weekday = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), weekend = c("Saturday", "Sunday"))
levels(filldat$day) <- list(Weekday = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), weekend = c("Saturday", "Sunday"))
View(filldat)
levels(fillday$dat)
levels(filldat$dat)
levels(filldat$day) <- list(Weekday = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), weekend = c("Saturday", "Sunday"))
levels(filldat$dat)
levels(filldat$day)
table(filldat$day)
filldat$day <- weekdays(filldat$date)
filldat$day <- as.factor(ifelse(filldat$day == "Saturday" | filldat$day == "Sunday", "weekend", "weekday"))
View(filldat)
table(filldat$day)
library(lattice)
str(filldat)
filldat$interval <- as.numeric(filldat$interval)
str(filldat)
avedat <- aggregate(filldat$steps, list(filldat$interval,filldat$day))
avedat <- aggregate(filldat$steps, list(filldat$interval,filldat$day), mean)
View(avedat)
View(avedat)
names(avedat) <- rename(c("Group.1" = "Interval", "Group.2" = "Day", "x" = Average_Steps))
names(avedat) <- rename(c("Group.1" = "Interval", "Group.2" = "Day", "x" = "Average_Steps"))
colnames(avedat) <- c("Interval", "Day", "Average_Steps")
xyplot(avedat$Average_Steps ~ avedat$Interval | avedat$Day, type = "l", layout = c(1,2), main = "Average Number of Steps Across All Weekday Days and Weekend Days", ylab = "Average Number of Steps", xlab = "Interval")
filldat$day <- as.factor(ifelse(filldat$day == "Saturday" | filldat$day == "Sunday", "Weekend", "Weekday"))
filldat$interval <- as.numeric(filldat$interval)
filldat$day <- weekdays(filldat$date)
filldat$day <- as.factor(ifelse(filldat$day == "Saturday" | filldat$day == "Sunday", "Weekend", "Weekday"))
avedat <- aggregate(filldat$steps, list(filldat$interval,filldat$day), mean)
colnames(avedat) <- c("Interval", "Day", "Average_Steps")
xyplot(avedat$Average_Steps ~ avedat$Interval | avedat$Day, type = "l", layout = c(1,2), main = "Average Number of Steps Across All Weekday Days and Weekend Days", ylab = "Average Number of Steps", xlab = "Interval")
todat <- aggregate(dat$steps, list(dat$date), sum)
